{"version":3,"sources":["helper/_commonHelper.js","helper/countries.js","dataLayer/actionsCreators/covid/covid.js","config.js","dataLayer/actionsCreators/countries/countries.js","components/_common/header/Header.js","components/CovidCountryMap/index.js","dataLayer/actionsCreators/country/index.js","components/CovidChartData/index.js","components/CovidLiveByCountry/index.js","components/CovidInfoCard/CovidInfoCard.js","App.js","reportWebVitals.js","dataLayer/reducers/covidReducer/reducer.js","dataLayer/reducers/countriesReducer/reducer.js","dataLayer/reducers/countryReducer/index.js","dataLayer/reducers/index.js","dataLayer/store.js","index.js"],"names":["abbrNum","number","decPlaces","Math","pow","abbrev","i","length","size","round","error","formatAppDate","date","dateObj","Date","Intl","DateTimeFormat","day","month","year","format","prepareCountriesData","rawCountriesData","output","countryData","covidDataByCountry","Array","isArray","country","name","countryInfo","cases","iso2","code","iso3","flag","lat","long","_id","totalCases","push","covidSetDataByCountry","dispatch","type","payload","config","countriesFetch","covidAC","a","completeUrl","fetch","rawData","json","countriesData","countriesSelectCountry","Header","lastUpdated","useState","countrySearch","setCountrySearch","useSelector","state","countries","selectedCountry","searchedCountries","searchText","toLowerCase","indexOf","searchCountryByname","allCountries","useDispatch","AC","bindActionCreators","useEffect","console","log","className","DropdownButton","as","ButtonGroup","variant","title","placeholder","aria-label","aria-describedby","value","onChange","e","target","map","Dropdown","Item","eventKey","onSelect","CovidCountryMap","infoWindowInstance","setInfoWindowInstance","mapInstance","setMapInstance","dataByCountry","covid","preparedDataByCountry","center","searched","lng","Object","values","googleMapsApiKey","mapContainerStyle","width","height","zoom","onLoad","position","close","todayCases","active","recovered","todayRecovered","deaths","todayDeaths","animation","visible","onClick","setOptions","content","latLng","open","openInfoBoxHandler","countriesFetchHistoricalData","days","enpoint","countryHData","timeline","CovidHistoricalChart","countryHistoricalData","countryCode","data","labels","keys","datasets","label","fill","backgroundColor","borderColor","options","responsive","plugins","display","text","ctx","tooltip","mode","interaction","axis","intersect","scales","x","stacked","y","ticks","callback","index","CovidLiveByCountry","preparedCountries","rawInput","keyToSort","sort","b","sortCountries","src","alt","data-bs-toggle","data-bs-placement","CovidInfoCard","heading","dataToShow","colorClass","today","total","App","Container","fluid","updated","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","dataByCountryError","dataByCountryErrorMessage","loading","errorMessage","reducer","action","allReducers","combineReducers","countriesReducer","countryReducer","covidReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa586acd.chunk.js","sourcesContent":["export const abbrNum = (number, decPlaces) => {\n    try {\n        // 2 decimal places => 100, 3 => 1000, etc\n        decPlaces = Math.pow(10, decPlaces);\n\n        // Enumerate number abbreviations\n        const abbrev = [\"K\", \"M\", \"B\", \"T\"];\n\n        // Go through the array backwards, so we do the largest first\n        for (var i = abbrev.length - 1; i >= 0; i--) {\n\n            // Convert array index to \"1000\", \"1000000\", etc\n            var size = Math.pow(10, (i + 1) * 3);\n\n            // If the number is bigger or equal do the abbreviation\n            if (size <= number) {\n                // Here, we multiply by decPlaces, round, and then divide by decPlaces.\n                // This gives us nice rounding to a particular decimal place.\n                number = Math.round(number * decPlaces / size) / decPlaces;\n\n                // Handle special case where we round up to the next abbreviation\n                if ((number === 1000) && (i < abbrev.length - 1)) {\n                    number = 1;\n                    i++;\n                }\n\n                // Add the letter for the abbreviation\n                number += abbrev[i];\n\n                // We are done... stop\n                break;\n            }\n        }\n\n        return number;\n    } catch (error) {\n        return number;\n    }\n};\n\nexport const formatAppDate = (date) => {\n    try {\n        const dateObj = (date) ? new Date(date) : new Date();\n        return new Intl.DateTimeFormat('en', { day: \"numeric\", month: \"short\", year: \"2-digit\" }).format(dateObj);\n    } catch (error) {\n        return new Date();\n    }\n};","export const sortCountries = (rawInput = [], keyToSort = `totalCases`) => {\n    try {\n        let output = [...rawInput];\n        // if input values are there\n        if (Array.isArray(output) && output.length > 0) {\n            // sort the array...\n            output.sort((a, b) => b[keyToSort] - a[keyToSort]);\n        }//EOI\n        return output;\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const prepareCountriesData = (rawCountriesData) => {\n    try {\n        let output = {\n            countryData: [],\n            covidDataByCountry: {}\n        };\n        // check if raw data is valid array and have data\n        if (rawCountriesData && Array.isArray(rawCountriesData) && rawCountriesData.length > 0) {\n            // run loop through it...\n            for (const country of rawCountriesData) {\n                const { country: name, countryInfo, cases = 0 } = country;\n                //check if required data is there\n                if (name && countryInfo?.iso2) {\n                    //preprae the proper object...\n                    const countryData = {\n                        name,\n                        code: countryInfo.iso2,\n                        iso3: countryInfo?.iso3,\n                        flag: countryInfo?.flag,\n                        lat: countryInfo?.lat,\n                        long: countryInfo?.long,\n                        _id: countryInfo?._id,\n                        totalCases: cases\n                    };\n\n                    output.countryData.push(countryData);\n                    output.covidDataByCountry[countryInfo.iso2] = country;\n                }//EOI\n            }//EOL\n        }//EOI\n        return output;\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const searchCountryByname = (searchText = ``, countries = []) => {\n    try {\n        let output = [];\n        if (searchText.length <= 0) return countries;\n        // search text is not empty, we need to filter the countries...\n        for (const country of countries) {\n            //check if text is matching with name\n            if (country.name.toLowerCase().indexOf(searchText.toLowerCase()) >= 0) {\n                output.push(country);\n            }//EOI\n        }//EOL\n        return output;\n    } catch (error) {\n        throw error;\n    }\n};","export const covidSetDataByCountry = (covidDataByCountry) => {\n    return (dispatch) => {\n        try {\n            // set covid data by country\n            dispatch({\n                type: \"covid-set-data-by-country\",\n                payload: covidDataByCountry\n            });\n        } catch (error) {\n            dispatch({\n                type: \"covid-set-data-by-country-error\",\n                payload: error\n            });\n        }\n    }\n}","export const config = {\n    apiBaseUrl: `https://disease.sh/v3/covid-19/`,\n    googleMapApiKey: `AIzaSyAIgW1Wb_j4lBrYhNwFG9Whgwz7am4oqm0`\n};","import { config } from '../../../config';\nimport { prepareCountriesData } from '../../../helper/countries';\n\nexport const countriesFetch = (covidAC = null) => {\n    return async (dispatch) => {\n        try {\n            //set loading ON\n            dispatch({\n                type: \"counties-set-loading\",\n                payload: true\n            });\n            const { apiBaseUrl } = config;\n            const completeUrl = `${apiBaseUrl}countries`;\n            // send request and fetch the data...\n            const rawData = await fetch(completeUrl);\n            const countriesData = await rawData.json();\n            const { countryData, covidDataByCountry } = prepareCountriesData(countriesData);\n            dispatch({\n                type: \"counties-fetch\",\n                payload: countryData\n            });\n            // dispatch the covid action\n            if (covidAC)\n                covidAC(covidDataByCountry);\n        } catch (error) {\n            dispatch({\n                type: \"counties-set-error\",\n                payload: error\n            });\n        }\n    }\n};\n\nexport const countriesSelectCountry = (country) => {\n    return (dispatch) => {\n        try {\n            //set selected country value...\n            dispatch({\n                type: \"counties-set-selected-country\",\n                payload: country\n            });\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n","import './Header.css';\nimport { useEffect, useState } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { formatAppDate } from '../../../helper/_commonHelper';\nimport { searchCountryByname } from '../../../helper/countries';\nimport { Dropdown, DropdownButton, ButtonGroup } from 'react-bootstrap';\nimport { covidSetDataByCountry } from '../../../dataLayer/actionsCreators/covid/covid';\nimport { countriesFetch, countriesSelectCountry } from '../../../dataLayer/actionsCreators/countries/countries';\n\n\nfunction Header({ lastUpdated }) {\n    const [countrySearch, setCountrySearch] = useState('');\n    const { selectedCountry, allCountries } = useSelector((state) => state.countries);\n    const searchedCountries = searchCountryByname(countrySearch, allCountries);\n\n    const dispatch = useDispatch();\n\n    const AC = bindActionCreators({ countriesFetch, countriesSelectCountry, covidSetDataByCountry }, dispatch);\n\n    // use effect to handle initial country data load...\n    useEffect(() => {\n        AC.countriesFetch(AC.covidSetDataByCountry);\n    }, []);\n\n    console.log('Header loaded');\n\n    return (\n        <div className=\"header-container d-flex flex-row justify-content-between align-items-center \">\n            <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                {/* Country selector dropdown */}\n                <DropdownButton as={ButtonGroup} variant=\"info\" title={selectedCountry?.name ? selectedCountry.name : 'Select a Country!'}>\n                    <div className=\"input-group\">\n                        <input type=\"text\" className=\"form-control country-search\" placeholder=\"Username\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" value={countrySearch} onChange={(e) => { setCountrySearch(e.target.value); }} />\n                    </div>\n                    {\n                        searchedCountries && searchedCountries.map((country) => (\n                            <Dropdown.Item className=\"fs-6\" eventKey={country.code} key={country._id} onSelect={(e) => { AC.countriesSelectCountry(country); }}>{country.name}</Dropdown.Item>\n                        ))\n                    }\n                </DropdownButton>\n                {/* Last Updated Value */}\n                <span className=\"fs-7 ml-1\">Last Updated - {formatAppDate(lastUpdated)}</span>\n            </div>\n            {/* Heading */}\n            <h2 className=\"heading\">Covid-19 Tracker</h2>\n        </div>\n    );\n}\n\nexport default Header;\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\n\nimport { config } from '../../config';\nimport { abbrNum } from '../../helper/_commonHelper';\n\nconst CovidCountryMap = () => {\n    const [infoWindowInstance, setInfoWindowInstance] = useState(null);\n    const [mapInstance, setMapInstance] = useState(null);\n    const { selectedCountry } = useSelector((state) => state.countries);\n    const { dataByCountry } = useSelector((state) => state.covid);\n    const preparedDataByCountry = (selectedCountry?.code && dataByCountry[selectedCountry?.code]) ? { 'searched': dataByCountry[selectedCountry.code] } : dataByCountry;\n\n    const containerStyle = {\n        width: '100%',\n        height: '400px'\n    };\n\n    const center = {\n        lat: preparedDataByCountry?.searched?.countryInfo?.lat || 20,\n        lng: preparedDataByCountry?.searched?.countryInfo?.long || 77\n    };\n\n    const openInfoBoxHandler = (e, { countryInfo, todayCases, active, recovered, todayRecovered, deaths, todayDeaths }) => {\n        try {\n            infoWindowInstance.setOptions({\n                content: `<div class=\"d-flex flex-column\">\n                <span>Today Cases Added - ${abbrNum(todayCases, 2)}</span>\n                <span>Total Active Cases - ${abbrNum(active, 2)}</span>\n                <span>Today Recovered - ${abbrNum(todayRecovered, 2)}</span>\n                <span>Total Recovered - ${abbrNum(recovered, 2)}</span>\n                <span>Today Deaths - ${abbrNum(todayDeaths, 2)}</span>\n                <span>Total Deaths - ${abbrNum(deaths, 2)}</span>\n                </div>`,\n                position: {\n                    lat: e.latLng.lat(),\n                    lng: e.latLng.lng()\n                },\n            });\n            infoWindowInstance.open(mapInstance);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    if (Object.values(preparedDataByCountry).length > 0) {\n        return (\n            <LoadScript\n                googleMapsApiKey={config.googleMapApiKey}\n            >\n                <GoogleMap\n                    mapContainerStyle={containerStyle}\n                    center={center}\n                    zoom={3}\n                    onLoad={(map) => { setMapInstance(map); }}\n                >\n                    <InfoWindow\n                        position={center}\n                        onLoad={(e) => { setInfoWindowInstance(e); e.close(); }}\n                    >\n                        <div>loading...</div>\n                    </InfoWindow>\n                    {\n                        Object.values(preparedDataByCountry).length > 0 && Object.values(preparedDataByCountry).map(({ countryInfo, todayCases, active, recovered, todayRecovered, deaths, todayDeaths }) => {\n                            if (countryInfo?.lat && countryInfo?.long) {\n                                return (\n                                    <Marker\n                                        position={{\n                                            lat: countryInfo.lat,\n                                            lng: countryInfo.long\n                                        }}\n                                        animation={'DROP'}\n                                        visible={true}\n                                        onClick={(e) => { openInfoBoxHandler(e, { countryInfo, todayCases, active, recovered, todayRecovered, deaths, todayDeaths }); }}\n                                        key={countryInfo._id}\n                                    />\n                                )\n                            }\n                            return null;\n                        })\n                    }\n                </GoogleMap>\n            </LoadScript>\n        )\n    } else\n        return (<h3>loading...</h3>)\n};\n\nexport default CovidCountryMap;","import { config } from '../../../config';\n\nexport const countriesFetchHistoricalData = (days, country = `all`) => {\n    return async (dispatch) => {\n        try {\n            // set Loading ON...\n            dispatch({\n                type: \"country-set-loading\",\n                payload: true,\n            });\n            // fetch the data for country...\n            const enpoint = `${config.apiBaseUrl}historical/${country}?lastdays=${days}`;\n            const rawData = await fetch(enpoint);\n            const countryHData = await rawData.json();\n\n            // set Data...\n            dispatch({\n                type: \"country-set-historical-data\",\n                payload: ('timeline' in countryHData) ? countryHData.timeline : countryHData,\n            });\n        } catch (error) {\n            // set error...\n            dispatch({\n                type: \"country-set-error\",\n                payload: error,\n            });\n        }\n    }\n};","import './index.css';\n\nimport { useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { bindActionCreators } from 'redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { countriesFetchHistoricalData } from '../../dataLayer/actionsCreators/country';\nimport { abbrNum } from '../../helper/_commonHelper';\n\nconst CovidHistoricalChart = () => {\n    const { selectedCountry } = useSelector((state) => state.countries);\n    const { countryHistoricalData, days } = useSelector((state) => state.country);\n    const dispatch = useDispatch();\n\n    const AC = bindActionCreators({ countriesFetchHistoricalData }, dispatch);\n\n    useEffect(() => {\n        const countryCode = (selectedCountry?.code) ? selectedCountry.code : 'all';\n        AC.countriesFetchHistoricalData(days, countryCode);\n    }, [selectedCountry]);\n\n    // prepare Data to show in chart\n    const { cases = {}, deaths = {}, recovered = {} } = countryHistoricalData;\n\n    const data = {\n        labels: Object.keys(cases),\n        datasets: [\n            {\n                label: `Deaths`,\n                data: Object.values(deaths),\n                fill: true,\n                backgroundColor: '#dc3545',\n                borderColor: 'red',\n            },\n            {\n                label: `Recovered`,\n                data: Object.values(recovered),\n                fill: true,\n                backgroundColor: '#28a745',\n                borderColor: 'green',\n            },\n            {\n                label: `Cases`,\n                data: Object.values(cases),\n                fill: true,\n                backgroundColor: '#FF9900',\n                borderColor: '#e08e12',\n            },\n\n        ],\n    };\n\n    const options = {\n        responsive: true,\n        plugins: {\n            title: {\n                display: false,\n                text: (ctx) => ``\n            },\n            tooltip: {\n                mode: 'index'\n            },\n        },\n        interaction: {\n            mode: 'nearest',\n            axis: 'x',\n            intersect: false\n        },\n        scales: {\n            x: {\n                stacked: true,\n                title: {\n                    display: true,\n                    text: 'Dates',\n                }\n            },\n            y: {\n                stacked: true,\n                title: {\n                    display: false,\n                    text: 'Total Cases',\n                },\n                ticks: {\n                    callback: (value, index, values) => {\n                        return abbrNum(value, 2);\n                    }\n                }\n            },\n\n        }\n    };\n\n    console.log(`CovidHistoricalChart loaded`);\n    return (\n        <div className=\"d-flex flex-column w-100 mt-4\">\n            <h5>Historical Data</h5>\n            {\n                Object.keys(cases).length > 0 && (\n                    <Line data={data} options={options} />\n                )\n            }\n\n        </div>\n    );\n};\n\nexport default CovidHistoricalChart;","import './index.css';\nimport { useSelector } from 'react-redux';\nimport { sortCountries } from '../../helper/countries';\nimport { abbrNum } from '../../helper/_commonHelper';\n\nconst CovidLiveByCountry = () => {\n    const { allCountries } = useSelector((state) => state.countries);\n    const preparedCountries = sortCountries(allCountries);\n\n    return (\n        <div className=\"countries-container bg-white px-3 py-4\">\n            <h5>Live Cases by Country</h5>\n            <div className=\"mt-4 all-country-wrapper\">\n                {\n                    preparedCountries && preparedCountries.map((country) => (\n                        <div key={country._id} className=\"d-flex flex-row align-items-center justify-content-between country-wrapper px-2\">\n                            <div className=\"d-flex flex-row\">\n                                <span className=\"country fs-7 text-black-50\">{country.iso3}</span>\n                                <div className=\"image-container d-flex justify-content-center align-items-center\">\n                                    <img src={country.flag} alt=\"flag\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" title={country.name} />\n                                </div>\n                            </div>\n                            <div className=\"text-right text-black-50\">{abbrNum(country.totalCases, 2)}</div>\n                        </div>\n                    ))\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default CovidLiveByCountry;","import './CovidInfoCard.css';\nimport { abbrNum } from '../../helper/_commonHelper';\n\nfunction CovidInfoCard({ heading, dataToShow, colorClass = `danger` }) {\n    const { today = 0, total = 0 } = dataToShow;\n    return (\n        <div className=\"card custom-card bg-white col-lg-3 col-md-3 col-sm-6\">\n            <div className=\"d-flex flex-column justify-content-center align-items-center my-2\">\n                <p className=\"text-black-50 m-0\">{heading}</p>\n                <h1 className={`text-${colorClass}`} data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" title=\"added today\">+{abbrNum(today, 1)}</h1>\n                <p className=\"text-black-50 fs-7 fw-bolder\">+{abbrNum(total, 2)} Total</p>\n            </div>\n        </div >\n    );\n}\n\nexport default CovidInfoCard;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { useSelector } from 'react-redux';\nimport { Container } from 'react-bootstrap';\nimport Header from './components/_common/header/Header';\nimport CovidCountryMap from './components/CovidCountryMap';\nimport CovidHistoricalChart from './components/CovidChartData';\nimport CovidLiveByCountry from './components/CovidLiveByCountry';\nimport CovidInfoCard from './components/CovidInfoCard/CovidInfoCard';\n\nfunction App() {\n    const { dataByCountry } = useSelector((state) => state.covid);\n    const { selectedCountry } = useSelector((state) => state.countries);\n\n    const dataToShow = (selectedCountry?.code && dataByCountry && dataByCountry[selectedCountry.code]) ? dataByCountry[selectedCountry.code] : {};\n\n    return (\n        <Container fluid className=\"d-flex flex-row mt-4\">\n            <div className=\"app__left col-lg-8 col-md-8 col-sm-12 px-4\">\n                <Header lastUpdated={dataToShow?.updated} />\n                <div className=\"d-flex flex-row justify-content-between mt-4\">\n                    <CovidInfoCard heading={`Coronavirus Cases`} dataToShow={{ \"total\": dataToShow?.cases, \"today\": dataToShow?.todayCases, \"active\": dataToShow?.active }}></CovidInfoCard>\n                    <CovidInfoCard heading={`Recovered`} colorClass={`success`} dataToShow={{ \"total\": dataToShow?.recovered, \"today\": dataToShow?.todayRecovered }}></CovidInfoCard>\n                    <CovidInfoCard heading={`Deaths`} dataToShow={{ \"total\": dataToShow?.deaths, \"today\": dataToShow?.todayDeaths }}></CovidInfoCard>\n                </div>\n                <div className=\"d-flex\">\n                    <CovidHistoricalChart />\n                </div>\n                <div className=\"d-flex mb-4\">\n                    <CovidCountryMap />\n                </div>\n            </div>\n            <div className=\"app__right col-lg-4 col-md-4 col-sm-12\">\n                <CovidLiveByCountry />\n            </div>\n        </Container >\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\n    dataByCountry: {},\n    dataByCountryError: false,\n    dataByCountryErrorMessage: ``,\n    loading: false,\n    error: false,\n    errorMessage: ``,\n};\n\nconst reducer = (state = initialState, action) => {\n    try {\n        switch (action.type) {\n            case \"covid-set-data-by-country\":\n                return {\n                    ...state,\n                    dataByCountry: action.payload,\n                    dataByCountryError: false,\n                    dataByCountryErrorMessage: ``\n                };\n            case \"covid-set-data-by-country-error\":\n                return {\n                    ...state,\n                    dataByCountryError: true,\n                    dataByCountryErrorMessage: action.payload\n                };\n            default:\n                return state;\n        }\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport default reducer;","const initialState = {\n    selectedCountry: { name: '', code: '' },\n    allCountries: [],\n    loading: false,\n    error: false,\n    errorMessage: ``\n};\n\nconst reducer = (state = initialState, action) => {\n    try {\n        switch (action.type) {\n            case \"counties-set-loading\":\n                return {\n                    ...state,\n                    loading: action.payload\n                };\n            case \"counties-fetch\":\n                return {\n                    ...state,\n                    allCountries: action.payload,\n                    loading: false,\n                    error: false,\n                    errorMessage: ``,\n                };\n            case \"counties-set-error\":\n                return {\n                    ...state,\n                    loading: false,\n                    error: true,\n                    errorMessage: action.payload,\n                }\n            case \"counties-set-selected-country\":\n                return {\n                    ...state,\n                    selectedCountry: {\n                        ...state.selectedCountry,\n                        name: action.payload.name,\n                        code: action.payload.code,\n                    }\n                };\n            default:\n                return state;\n        }\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport default reducer;","const initialState = {\n    countryHistoricalData: {},\n    loading: false,\n    error: false,\n    errorMessage: ``,\n    days: 90,\n};\n\nconst reducer = (state = initialState, action) => {\n    try {\n        switch (action.type) {\n            case \"country-set-error\":\n                return {\n                    ...state,\n                    loading: false,\n                    error: true,\n                    errorMessage: action.payload\n                };\n            case \"country-set-loading\":\n                return {\n                    ...state,\n                    loading: action.payload\n                };\n            case \"country-set-historical-data\":\n                return {\n                    ...state,\n                    loading: false,\n                    error: false,\n                    errorMessage: ``,\n                    countryHistoricalData: action.payload\n                };\n            default:\n                return state;\n        }\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport default reducer;","import { combineReducers } from 'redux';\n\nimport covidReducer from './covidReducer/reducer';\nimport countriesReducer from './countriesReducer/reducer';\nimport countryReducer from './countryReducer';\n\nconst allReducers = combineReducers({\n    countries: countriesReducer,\n    country: countryReducer,\n    covid: covidReducer\n});\n\nexport default allReducers;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport allReducers from './reducers/index';\n\nconst store = createStore(\n    allReducers,\n    {},\n    applyMiddleware(thunk)\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nimport store from './dataLayer/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}